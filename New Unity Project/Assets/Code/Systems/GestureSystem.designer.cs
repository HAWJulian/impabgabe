// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace abgabe {
    using abgabe;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.ECS;
    using uFrame.Kernel;
    using UniRx;
    using UnityEngine;
    
    
    public partial class GestureSystemBase : uFrame.ECS.EcsSystem {
        
        private IEcsComponentManagerOf<MovableObject> _MovableObjectManager;
        
        private IEcsComponentManagerOf<SubMenuComponent> _SubMenuComponentManager;
        
        private IEcsComponentManagerOf<MenuItemComponent> _MenuItemComponentManager;
        
        private IEcsComponentManagerOf<MenuSelectionComponent> _MenuSelectionComponentManager;
        
        private IEcsComponentManagerOf<MenuComponent> _MenuComponentManager;
        
        private IEcsComponentManagerOf<SubMenuItemComponent> _SubMenuItemComponentManager;
        
        private IEcsComponentManagerOf<RightHandComponent> _RightHandComponentManager;
        
        private IEcsComponentManagerOf<LeftHandComponent> _LeftHandComponentManager;
        
        private IEcsComponentManagerOf<NewGroupNode> _NewGroupNodeManager;
        
        public IEcsComponentManagerOf<MovableObject> MovableObjectManager {
            get {
                return _MovableObjectManager;
            }
            set {
                _MovableObjectManager = value;
            }
        }
        
        public IEcsComponentManagerOf<SubMenuComponent> SubMenuComponentManager {
            get {
                return _SubMenuComponentManager;
            }
            set {
                _SubMenuComponentManager = value;
            }
        }
        
        public IEcsComponentManagerOf<MenuItemComponent> MenuItemComponentManager {
            get {
                return _MenuItemComponentManager;
            }
            set {
                _MenuItemComponentManager = value;
            }
        }
        
        public IEcsComponentManagerOf<MenuSelectionComponent> MenuSelectionComponentManager {
            get {
                return _MenuSelectionComponentManager;
            }
            set {
                _MenuSelectionComponentManager = value;
            }
        }
        
        public IEcsComponentManagerOf<MenuComponent> MenuComponentManager {
            get {
                return _MenuComponentManager;
            }
            set {
                _MenuComponentManager = value;
            }
        }
        
        public IEcsComponentManagerOf<SubMenuItemComponent> SubMenuItemComponentManager {
            get {
                return _SubMenuItemComponentManager;
            }
            set {
                _SubMenuItemComponentManager = value;
            }
        }
        
        public IEcsComponentManagerOf<RightHandComponent> RightHandComponentManager {
            get {
                return _RightHandComponentManager;
            }
            set {
                _RightHandComponentManager = value;
            }
        }
        
        public IEcsComponentManagerOf<LeftHandComponent> LeftHandComponentManager {
            get {
                return _LeftHandComponentManager;
            }
            set {
                _LeftHandComponentManager = value;
            }
        }
        
        public IEcsComponentManagerOf<NewGroupNode> NewGroupNodeManager {
            get {
                return _NewGroupNodeManager;
            }
            set {
                _NewGroupNodeManager = value;
            }
        }
        
        public override void Setup() {
            base.Setup();
            MovableObjectManager = ComponentSystem.RegisterComponent<MovableObject>(9);
            SubMenuComponentManager = ComponentSystem.RegisterComponent<SubMenuComponent>(6);
            MenuItemComponentManager = ComponentSystem.RegisterComponent<MenuItemComponent>(5);
            MenuSelectionComponentManager = ComponentSystem.RegisterComponent<MenuSelectionComponent>(3);
            MenuComponentManager = ComponentSystem.RegisterComponent<MenuComponent>(4);
            SubMenuItemComponentManager = ComponentSystem.RegisterComponent<SubMenuItemComponent>(7);
            RightHandComponentManager = ComponentSystem.RegisterComponent<RightHandComponent>(2);
            LeftHandComponentManager = ComponentSystem.RegisterComponent<LeftHandComponent>(1);
            NewGroupNodeManager = ComponentSystem.RegisterGroup<NewGroupNodeGroup,NewGroupNode>();
            this.OnEvent<uFrame.Kernel.GameReadyEvent>().Subscribe(_=>{ GestureSystemGameReadyFilter(_); }).DisposeWith(this);
            this.OnEvent<abgabe.UnparentMovableObject>().Subscribe(_=>{ GestureSystemUnparentMovableObjectFilter(_); }).DisposeWith(this);
            this.OnEvent<abgabe.RightPinchDetected>().Subscribe(_=>{ GestureSystemRightPinchDetectedFilter(_); }).DisposeWith(this);
            this.OnEvent<abgabe.LeftPinchDetected>().Subscribe(_=>{ GestureSystemLeftPinchDetectedFilter(_); }).DisposeWith(this);
        }
        
        protected virtual void GestureSystemGameReadyHandler(uFrame.Kernel.GameReadyEvent data) {
            var handler = new GestureSystemGameReadyHandler();
            handler.System = this;
            handler.Event = data;
            StartCoroutine(handler.Execute());
        }
        
        protected void GestureSystemGameReadyFilter(uFrame.Kernel.GameReadyEvent data) {
            this.GestureSystemGameReadyHandler(data);
        }
        
        protected virtual void GestureSystemUnparentMovableObjectHandler(abgabe.UnparentMovableObject data, MovableObject group) {
            var handler = new GestureSystemUnparentMovableObjectHandler();
            handler.System = this;
            handler.Event = data;
            handler.Group = group;
            StartCoroutine(handler.Execute());
        }
        
        protected void GestureSystemUnparentMovableObjectFilter(abgabe.UnparentMovableObject data) {
            var MovableObjectItems = MovableObjectManager.Components;
            for (var MovableObjectIndex = 0
            ; MovableObjectIndex < MovableObjectItems.Count; MovableObjectIndex++
            ) {
                if (!MovableObjectItems[MovableObjectIndex].Enabled) {
                    continue;
                }
                this.GestureSystemUnparentMovableObjectHandler(data, MovableObjectItems[MovableObjectIndex]);
            }
        }
        
        protected virtual void GestureSystemRightPinchDetectedHandler(abgabe.RightPinchDetected data) {
            var handler = new GestureSystemRightPinchDetectedHandler();
            handler.System = this;
            handler.Event = data;
            StartCoroutine(handler.Execute());
        }
        
        protected void GestureSystemRightPinchDetectedFilter(abgabe.RightPinchDetected data) {
            this.GestureSystemRightPinchDetectedHandler(data);
        }
        
        protected virtual void GestureSystemLeftPinchDetectedHandler(abgabe.LeftPinchDetected data) {
            var handler = new GestureSystemLeftPinchDetectedHandler();
            handler.System = this;
            handler.Event = data;
            StartCoroutine(handler.Execute());
        }
        
        protected void GestureSystemLeftPinchDetectedFilter(abgabe.LeftPinchDetected data) {
            this.GestureSystemLeftPinchDetectedHandler(data);
        }
    }
    
    [uFrame.Attributes.uFrameIdentifier("25250ee0-83a0-4eed-904e-530dbdb23c33")]
    public partial class GestureSystem : GestureSystemBase {
        
        private static GestureSystem _Instance;
        
        public GestureSystem() {
            Instance = this;
        }
        
        public static GestureSystem Instance {
            get {
                return _Instance;
            }
            set {
                _Instance = value;
            }
        }
    }
}
