// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace abgabe {
    using abgabe;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.ECS;
    using uFrame.Kernel;
    using UniRx;
    using UnityEngine;
    
    
    public partial class MenuSystemBase : uFrame.ECS.EcsSystem {
        
        private IEcsComponentManagerOf<SubMenuComponent> _SubMenuComponentManager;
        
        private IEcsComponentManagerOf<MenuComponent> _MenuComponentManager;
        
        private IEcsComponentManagerOf<MenuItemComponent> _MenuItemComponentManager;
        
        private IEcsComponentManagerOf<MenuSelectionComponent> _MenuSelectionComponentManager;
        
        private IEcsComponentManagerOf<SubMenuItemComponent> _SubMenuItemComponentManager;
        
        private IEcsComponentManagerOf<RightHandComponent> _RightHandComponentManager;
        
        private IEcsComponentManagerOf<LeftHandComponent> _LeftHandComponentManager;
        
        public IEcsComponentManagerOf<SubMenuComponent> SubMenuComponentManager {
            get {
                return _SubMenuComponentManager;
            }
            set {
                _SubMenuComponentManager = value;
            }
        }
        
        public IEcsComponentManagerOf<MenuComponent> MenuComponentManager {
            get {
                return _MenuComponentManager;
            }
            set {
                _MenuComponentManager = value;
            }
        }
        
        public IEcsComponentManagerOf<MenuItemComponent> MenuItemComponentManager {
            get {
                return _MenuItemComponentManager;
            }
            set {
                _MenuItemComponentManager = value;
            }
        }
        
        public IEcsComponentManagerOf<MenuSelectionComponent> MenuSelectionComponentManager {
            get {
                return _MenuSelectionComponentManager;
            }
            set {
                _MenuSelectionComponentManager = value;
            }
        }
        
        public IEcsComponentManagerOf<SubMenuItemComponent> SubMenuItemComponentManager {
            get {
                return _SubMenuItemComponentManager;
            }
            set {
                _SubMenuItemComponentManager = value;
            }
        }
        
        public IEcsComponentManagerOf<RightHandComponent> RightHandComponentManager {
            get {
                return _RightHandComponentManager;
            }
            set {
                _RightHandComponentManager = value;
            }
        }
        
        public IEcsComponentManagerOf<LeftHandComponent> LeftHandComponentManager {
            get {
                return _LeftHandComponentManager;
            }
            set {
                _LeftHandComponentManager = value;
            }
        }
        
        public override void Setup() {
            base.Setup();
            SubMenuComponentManager = ComponentSystem.RegisterComponent<SubMenuComponent>(6);
            MenuComponentManager = ComponentSystem.RegisterComponent<MenuComponent>(4);
            MenuItemComponentManager = ComponentSystem.RegisterComponent<MenuItemComponent>(5);
            MenuSelectionComponentManager = ComponentSystem.RegisterComponent<MenuSelectionComponent>(3);
            SubMenuItemComponentManager = ComponentSystem.RegisterComponent<SubMenuItemComponent>(7);
            RightHandComponentManager = ComponentSystem.RegisterComponent<RightHandComponent>(2);
            LeftHandComponentManager = ComponentSystem.RegisterComponent<LeftHandComponent>(1);
            this.OnEvent<uFrame.ECS.OnTriggerEnterDispatcher>().Subscribe(_=>{ MenuSystemOnTriggerEnterFilter(_); }).DisposeWith(this);
            this.OnEvent<uFrame.ECS.OnTriggerEnterDispatcher>().Subscribe(_=>{ MenuSystemOnTriggerEnter2Filter(_); }).DisposeWith(this);
            this.OnEvent<abgabe.MenuSelectEvent>().Subscribe(_=>{ MenuSystemMenuSelectEventFilter(_); }).DisposeWith(this);
        }
        
        protected virtual void MenuSystemOnTriggerEnterHandler(uFrame.ECS.OnTriggerEnterDispatcher data, MenuItemComponent collider, MenuSelectionComponent source) {
            var handler = new MenuSystemOnTriggerEnterHandler();
            handler.System = this;
            handler.Event = data;
            handler.Collider = collider;
            handler.Source = source;
            StartCoroutine(handler.Execute());
        }
        
        protected void MenuSystemOnTriggerEnterFilter(uFrame.ECS.OnTriggerEnterDispatcher data) {
            var ColliderMenuItemComponent = MenuItemComponentManager[data.ColliderId];
            if (ColliderMenuItemComponent == null) {
                return;
            }
            if (!ColliderMenuItemComponent.Enabled) {
                return;
            }
            var SourceMenuSelectionComponent = MenuSelectionComponentManager[data.EntityId];
            if (SourceMenuSelectionComponent == null) {
                return;
            }
            if (!SourceMenuSelectionComponent.Enabled) {
                return;
            }
            this.MenuSystemOnTriggerEnterHandler(data, ColliderMenuItemComponent, SourceMenuSelectionComponent);
        }
        
        protected virtual void MenuSystemOnTriggerEnter2Handler(uFrame.ECS.OnTriggerEnterDispatcher data, SubMenuItemComponent collider, MenuSelectionComponent source) {
            var handler = new MenuSystemOnTriggerEnter2Handler();
            handler.System = this;
            handler.Event = data;
            handler.Collider = collider;
            handler.Source = source;
            StartCoroutine(handler.Execute());
        }
        
        protected void MenuSystemOnTriggerEnter2Filter(uFrame.ECS.OnTriggerEnterDispatcher data) {
            var ColliderSubMenuItemComponent = SubMenuItemComponentManager[data.ColliderId];
            if (ColliderSubMenuItemComponent == null) {
                return;
            }
            if (!ColliderSubMenuItemComponent.Enabled) {
                return;
            }
            var SourceMenuSelectionComponent = MenuSelectionComponentManager[data.EntityId];
            if (SourceMenuSelectionComponent == null) {
                return;
            }
            if (!SourceMenuSelectionComponent.Enabled) {
                return;
            }
            this.MenuSystemOnTriggerEnter2Handler(data, ColliderSubMenuItemComponent, SourceMenuSelectionComponent);
        }
        
        protected virtual void MenuSystemMenuSelectEventHandler(abgabe.MenuSelectEvent data, SubMenuComponent group) {
            var handler = new MenuSystemMenuSelectEventHandler();
            handler.System = this;
            handler.Event = data;
            handler.Group = group;
            StartCoroutine(handler.Execute());
        }
        
        protected void MenuSystemMenuSelectEventFilter(abgabe.MenuSelectEvent data) {
            var SubMenuComponentItems = SubMenuComponentManager.Components;
            for (var SubMenuComponentIndex = 0
            ; SubMenuComponentIndex < SubMenuComponentItems.Count; SubMenuComponentIndex++
            ) {
                if (!SubMenuComponentItems[SubMenuComponentIndex].Enabled) {
                    continue;
                }
                this.MenuSystemMenuSelectEventHandler(data, SubMenuComponentItems[SubMenuComponentIndex]);
            }
        }
    }
    
    [uFrame.Attributes.uFrameIdentifier("d87d5a1e-6d13-4cb6-8529-2022ab158309")]
    public partial class MenuSystem : MenuSystemBase {
        
        private static MenuSystem _Instance;
        
        public MenuSystem() {
            Instance = this;
        }
        
        public static MenuSystem Instance {
            get {
                return _Instance;
            }
            set {
                _Instance = value;
            }
        }
    }
}
